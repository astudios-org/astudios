name: Release

# Trigger on version tags
on:
  push:
    tags:
      - 'v*'
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - alpha
          - beta
          - rc

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Automated release job triggered by tags
  release-tag:
    name: Release from Tag
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-release
        run: cargo install cargo-release

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify version matches Cargo.toml
        run: |
          CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          TAG_VERSION="${{ steps.extract_version.outputs.version }}"
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch: Cargo.toml has $CARGO_VERSION, tag has $TAG_VERSION"
            exit 1
          fi

      - name: Run pre-release checks
        run: |
          cargo test --all-features
          cargo clippy --all-targets --all-features -- -D warnings
          cargo fmt --all -- --check
          cargo doc --no-deps --all-features
          cargo audit

      - name: Build release binary
        run: cargo build --release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Release ${{ github.ref_name }} of astudios
            
            ## Changes
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
            
            ## Installation
            ```bash
            cargo install astudios
            ```
          draft: false
          prerelease: false
          files: |
            target/release/astudios
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Manual release job
  release-manual:
    name: Manual Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-release
        run: cargo install cargo-release

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Perform release
        run: |
          case "${{ github.event.inputs.release_type }}" in
            "patch")
              cargo release patch --execute --no-confirm
              ;;
            "minor")
              cargo release minor --execute --no-confirm
              ;;
            "major")
              cargo release major --execute --no-confirm
              ;;
            "alpha")
              cargo release --profile alpha --execute --no-confirm
              ;;
            "beta")
              cargo release --profile beta --execute --no-confirm
              ;;
            "rc")
              cargo release --profile rc --execute --no-confirm
              ;;
            *)
              echo "Unknown release type: ${{ github.event.inputs.release_type }}"
              exit 1
              ;;
          esac
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Cross-platform binary builds for releases
  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: astudios
            asset_name: astudios-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: astudios
            asset_name: astudios-linux-x86_64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: astudios
            asset_name: astudios-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: astudios
            asset_name: astudios-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: astudios.exe
            asset_name: astudios-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix only)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Upload binary to release
        uses: softprops/action-gh-release@v2
        with:
          files: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename binary for upload
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          fi
        shell: bash

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}